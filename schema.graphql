type AddToken @entity(immutable: true) {
  id: Bytes!
  tokenAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Create @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt! # uint256
  challengeType: Int! # uint8
  seedMoney: BigInt! # uint256
  entryFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EntryFee @entity(immutable: true) {
  id: Bytes!
  newEntryFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Join @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt! # uint256
  user: Bytes! # address
  seedMoney: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MaxAssets @entity(immutable: true) {
  id: Bytes!
  newMaxAssets: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Register @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt! # uint256
  user: Bytes! # address
  performance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveToken @entity(immutable: true) {
  id: Bytes!
  tokenAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Reward @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt! # uint256
  user: Bytes! # address
  rewardAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardRatio @entity(immutable: true) {
  id: Bytes!
  newRewardRatio: [BigInt!]! # uint256[5]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SeedMoney @entity(immutable: true) {
  id: Bytes!
  newSeedMoney: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SteleCreated @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  usdToken: Bytes! # address
  maxAssets: Int! # uint8
  seedMoney: BigInt! # uint256
  entryFee: BigInt! # uint256
  rewardRatio: [BigInt!]! # uint256[5]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SteleTokenBonus @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt! # uint256
  user: Bytes! # address
  action: String! # string
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Swap @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt! # uint256
  user: Bytes! # address
  fromAsset: Bytes! # address
  toAsset: Bytes! # address
  fromAmount: BigInt! # uint256
  toAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type EIP712DomainChanged @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalCanceled @entity(immutable: true) {
  id: Bytes!
  proposalId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalCreated @entity(immutable: true) {
  id: Bytes!
  proposalId: BigInt! # uint256
  proposer: Bytes! # address
  targets: [Bytes!]! # address[]
  values: [BigInt!]! # uint256[]
  signatures: [String!]! # string[]
  calldatas: [Bytes!]! # bytes[]
  voteStart: BigInt! # uint256
  voteEnd: BigInt! # uint256
  description: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalExecuted @entity(immutable: true) {
  id: Bytes!
  proposalId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalQueued @entity(immutable: true) {
  id: Bytes!
  proposalId: BigInt! # uint256
  eta: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalThresholdSet @entity(immutable: true) {
  id: Bytes!
  oldProposalThreshold: BigInt! # uint256
  newProposalThreshold: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type QuorumNumeratorUpdated @entity(immutable: true) {
  id: Bytes!
  oldQuorumNumerator: BigInt! # uint256
  newQuorumNumerator: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TimelockChange @entity(immutable: true) {
  id: Bytes!
  oldTimelock: Bytes! # address
  newTimelock: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VoteCast @entity(immutable: true) {
  id: Bytes!
  voter: Bytes! # address
  proposalId: BigInt! # uint256
  support: Int! # uint8
  weight: BigInt! # uint256
  reason: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VoteCastWithParams @entity(immutable: true) {
  id: Bytes!
  voter: Bytes! # address
  proposalId: BigInt! # uint256
  support: Int! # uint8
  weight: BigInt! # uint256
  reason: String! # string
  params: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VotingDelaySet @entity(immutable: true) {
  id: Bytes!
  oldVotingDelay: BigInt! # uint256
  newVotingDelay: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VotingPeriodSet @entity(immutable: true) {
  id: Bytes!
  oldVotingPeriod: BigInt! # uint256
  newVotingPeriod: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
